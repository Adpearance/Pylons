// @variables
$row-width: 1024px;
$column-gutter: rem-calc(30) !default;
$total-columns: 12 !default;

// @FUNCTION
@function grid-calc($colNumber, $totalColumns) {
	@return percentage(($colNumber / $totalColumns));
}

// Default: false. Options: nest, collapse, nest-collapse, false.
@mixin grid-row($behavior: false) {

	@if $behavior == nest {
		width: auto;
		margin-left: -($column-gutter/2);
		margin-right: -($column-gutter/2);
		margin-top: 0;
		margin-bottom: 0;
		max-width: none;
	}

	@else if $behavior == collapse {
		width: 100%;
		margin: 0;
		max-width: $row-width;
	}

	@else if $behavior == nest-collapse {
		width: auto;
		margin: 0;
		max-width: none;
	}

	@else {
		width: 100%;
		margin-left: auto;
		margin-right: auto;
		margin-top: 0;
		margin-bottom: 0;
		max-width: $row-width;
	}

	@include clearfix();
}


// Creates a column, should be used inside of a media query to control layouts
//
// $columns - The number of columns this should be
// $last-column - Is this the last column? Default: false.
// $center - Center these columns? Default: false.
// $offset - # of columns to offset. Default: false.
// $push - # of columns to push. Default: false.
// $pull - # of columns to pull. Default: false.
// $collapse - Get rid of gutter padding on column? Default: false.
// $float - Should this float? Default: true. Options: true, false, left, right.
@mixin grid-column(
	$columns:false,
	$last-column:false,
	$center:false,
	$offset:false,
	$push:false,
	$pull:false,
	$collapse:false,
	$float:true,
	$position:false) {

		@if $position or $push or $pull {
			position: relative;
		}

		// If collapsed, get rid of gutter padding
		@if $collapse {
			padding-left: 0;
			padding-right: 0;
		}
		@else if $collapse == false {
				padding-left: $column-gutter / 2;
				padding-right: $column-gutter / 2;
			}

		@if $columns {
			width: grid-calc($columns, $total-columns);
			@if $last-column { float: right; }
		}

		@if $push { left: grid-calc($push, $total-columns); right: auto; }
		@if $pull { right: grid-calc($pull, $total-columns); left: auto; }

		@if $float {
			@if $float == left or $float == true { float: left; }
			@else if $float == right { float: right; }
			@else { float: none; }
		}

		@if $center {
			margin-left: auto;
			margin-right: auto;
			float: none !important;
		}

		@if $offset { margin-left: grid-calc($offset, $total-columns)  !important; }
	}


// $size - Name of class to use, i.e. "large" will generate .large-1, .large-2, etc.
@mixin grid-html-classes($size) {

	@for $i from 0 through $total-columns - 1 {
		.#{$size}-push-#{$i} {
			@include grid-column($push:$i, $collapse:null, $float:false);
		}
		.#{$size}-pull-#{$i} {
			@include grid-column($pull:$i, $collapse:null, $float:false);
		}
	}

	.column,
	.columns { @include grid-column($columns:false, $position:true); }


	@for $i from 1 through $total-columns {
		.#{$size}-#{$i} { @include grid-column($columns:$i,$collapse:null,$float:false); }
	}

	@for $i from 0 through $total-columns - 1 {
		.#{$size}-offset-#{$i} { @include grid-column($offset:$i, $collapse:null,$float:false); }
	}
	.#{$size}-reset-order,
	.#{$size}-reset-order {
		margin-left: 0;
		margin-right: 0;
		left: auto;
		right: auto;
		float: left;
	}

	.column.#{$size}-centered,
	.columns.#{$size}-centered { @include grid-column($center:true, $collapse:null, $float:false); }

	.column.#{$size}-uncentered,
	.columns.#{$size}-uncentered {
		margin-left: 0;
		margin-right: 0;
		float: left;
	}

	.column.#{$size}-centered:last-child,
	.columns.#{$size}-centered:last-child{
		float: none;
	}

	// Fighting .column.<previous-size>-centered:last-child
	.column.#{$size}-uncentered:last-child,
	.columns.#{$size}-uncentered:last-child {
		float: left;
	}

	.column.#{$size}-uncentered.opposite,
	.columns.#{$size}-uncentered.opposite {
		float: right;
	}

}


.row {
	@include grid-row;
	&.collapse {
		> .column,
		> .columns { @include grid-column($collapse:true, $float:false); }
	.row {margin-left:0; margin-right:0;}
	}
	.row { @include grid-row($behavior:nest);
		&.collapse { @include grid-row($behavior:nest-collapse); }
	}
}

.column,
.columns { @include grid-column($columns:$total-columns); }

@media #{$small-up} {
	@include grid-html-classes($size:small);
}

@media #{$medium-up} {
	@include grid-html-classes($size:medium);
	@for $i from 1 through $total-columns - 1 {
		.push#{-$i} {
			@include grid-column($push:$i, $collapse:null, $float:false);
		}
		.pull#{-$i} {
			@include grid-column($pull:$i, $collapse:null, $float:false);
		}
	}
}

@media #{$large-up} {
	@include grid-html-classes($size:large);
	@for $i from 0 through $total-columns - 1 {
		.push-#{$i} {
			@include grid-column($push:$i, $collapse:null, $float:false);
		}
		.pull-#{$i} {
			@include grid-column($pull:$i, $collapse:null, $float:false);
		}
	}
}

@media #{$xlarge-up} {
	@include grid-html-classes($size:xlarge);
}

@media #{$xxlarge-up} {
	@include grid-html-classes($size:xxlarge);
}
